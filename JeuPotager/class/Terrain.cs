public class Terrain
{
    public string? Nom { get; set; }
    public double Superficie { get; set; }
    public int LongueurTerrain { get; set; }
    public int LargeurTerrain { get; set; }
    public string? TypeSol { get; set; }
    public string? HumiditeSol { get; set; }
    public double NiveauHumiditeSol { get; set; }
    public double TemperatureConsigne { get; set; } //Temp√©rature consigne du terrain pour la m√©t√©o
    public List<List<Plante?>> Plantes { get; set; } = new(); // grille de plantes (null = vide) ; utile pour ne pas g√©rer les coordon√©es des plantes (x,y)
    public int? CapaciteMaxPlantes { get; set; } //Valeur calcul√©e √† partir de la longueur et de la largueur
    public int NbPlantes { get; private set; } = 0; //Nombre de plantes pr√©sentes et en vie sur le terrain
    public double PiecesOrEnChocolat { get; private set; } = 0; //Solde bancaire du joueur
    public int? StockTotalDeSemis { get; private set; } = 0;//Stock de semis disponible pour le terrain
    public Meteo Meteo { get; set; }
    private int RisquePresenceIntrus { get; set; } //Pourcentage de pr√©sence qu'un intrus attaque le terrain 
    private Random Random { get; }



    //-------------  ETAT DU TERRAIN (BOOLEEN)
    public bool EstRecouvertDePlantesMortes { get; set; } = false;
    private bool IntrusDetecte { get; set; } = false;
    private bool IntemperieDetectee { get; set; } = false;
    public bool EstVide { get; set; } = false;


    public Terrain(string nom, double superficie, int longueurTerrain, int largeurTerrain,
                   string typeSol, string humiditeSol, double niveauHumiditeSol, double temperatureConsigne, Meteo meteo, int risquePresenceIntrus)
    {
        Nom = nom;
        Superficie = superficie;
        LongueurTerrain = longueurTerrain;
        LargeurTerrain = largeurTerrain;
        TypeSol = typeSol;
        HumiditeSol = humiditeSol;
        NiveauHumiditeSol = niveauHumiditeSol;
        TemperatureConsigne = temperatureConsigne;
        Meteo = meteo;
        RisquePresenceIntrus = risquePresenceIntrus;

        CapaciteMaxPlantes = longueurTerrain * largeurTerrain;
        StockTotalDeSemis = CapaciteMaxPlantes;

        Random = new Random();
        InitialiserTerrain();
    }

    public Terrain(string nom, Meteo meteo)
    {
        Nom = nom;
        Meteo = meteo;
        Random = new Random();
        InitialiserTerrain();
    }

    ///////------------------------------- Affichage du terrain

    private void InitialiserTerrain()
    {
        Plantes = new List<List<Plante?>>();

        // Parcours de toute la grille de plantes
        for (int i = 0; i < LongueurTerrain; i++)
        {
            var ligne = new List<Plante?>();
            for (int j = 0; j < LargeurTerrain; j++)
            {
                ligne.Add(null); // pas de plante au d√©part donc les cases sont initialis√©es √† null
            }
            Plantes.Add(ligne); //
        }
    }

    public void AfficherParcelle()
    {
        // Parcours de toute la grille de plantes
        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];
                // Les plantes peuvent avoir plusieurs √©tat √† la fois mais
                // l'affichage se fait par ordre d'importance de l'√©tat
                // ex: une plante peut etre malade ET avec des mauvaises herbes
                //mais une fois soign√©e, elle sera affich√©e avec des mauvaises herbes... (sauf si d√©herber avant) 

                if (plante == null)
                {
                    Console.Write(" üü´ "); //Case vide sans plante
                }
                else if (plante.EstMorte)
                {
                    Console.Write(" ü•Ä ");//Plante morte
                }
                else if (plante.EstMalade)
                {
                    Console.Write(" ü¶† ");//Plante malade
                }
                else if (plante.EstEntoureeParMauvaisesHerbes)
                {
                    Console.Write(" üçÄ ");//Plante avec des mauvaises herbes
                }
                else if (plante.EstRecoltable)
                {
                    Console.Write(" üç¨ ");//Plante fleurit et donc r√©coltable
                }
                else if (plante.AGrandi)
                {
                    Console.Write(" üåø ");//Plante grandie (en croissance)
                }
                else if (plante.EstSemee)
                {
                    Console.Write(" üå± ");//Plante en semis
                }
                else
                {
                    Console.Write(" üü© ");//Par d√©faut
                }
            }
            Console.WriteLine("\n");
        }
    }

    ///////-------------------------------------------- Etat du terrain et des plantes

    public void VerifierTerrainMorts()
    {
        int nbPlantesReelles = 0;         // Plantes r√©ellement pr√©sentes (non null), on recalcule pour etre sur que ce soit √† jour
        int compteurPlantesMortes = 0;    // Plantes pr√©sentes et mortes

        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                if (plante != null && plante.EstSemee)
                {
                    nbPlantesReelles++;

                    if (plante.EstMorte)
                    {
                        compteurPlantesMortes++;
                    }
                }
            }
        }

        // V√©rifie si toutes les plantes r√©elles sont mortes
        if (nbPlantesReelles > 0 && compteurPlantesMortes == nbPlantesReelles && StockTotalDeSemis <= 0)
        {
            EstRecouvertDePlantesMortes = true;
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(" Toutes les plantes du terrain sont mortes ... üò¢");
            Console.ResetColor();
        }
    }




    public void EtreVide() //M√©thode qui v√©rifie si le terrain est vide
    {
        if (NbPlantes <= 0)
            EstVide = true;
    }

    public bool VerifierFinDePartie()
    {
        EtreVide(); // Met √† jour l‚Äô√©tat du terrain (vide ou non)

        if (EstVide && (StockTotalDeSemis <= 0))
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(" Votre terrain est vide et vous n'avez plus de semis... üò¢");
            Console.ResetColor();
            // La partie est termin√©e si le terrain est vide et qu‚Äôil n‚Äôy a plus de semis
            return true;
        }
        else
            return false;
    }

    public void CroissancePlantes(string typeSol, string humiditeTerrain, double temperatureActuelle, TypeMeteo meteoActuelle)
    {
        bool messageAffiche = false; // Permet de n'afficher le message d'alerte qu'une seule fois, m√™me si plusieurs plantes sont affect√©es

        for (int x = 0; x < LongueurTerrain; x++)
        {
            for (int y = 0; y < LargeurTerrain; y++)
            {
                var plante = Plantes[x][y];

                // Si la case contient une plante ET qui est vivante ET sem√©e
                if (plante != null && !plante.EstMorte && plante.EstSemee)
                {
                    bool conditionsDefavorables = plante.Croissance(typeSol, humiditeTerrain, temperatureActuelle, Meteo, meteoActuelle); // Appelle la m√©thode de croissance de Plante.cs
                    if (conditionsDefavorables && !messageAffiche)// Si les conditions sont d√©favorables
                    {
                        Console.WriteLine(" Vos plantes vont mourir √† cause de conditions d√©favorables... üòî");
                        messageAffiche = true;
                        EstRecouvertDePlantesMortes = true; // Le terrain est maintenant recouvert de plantes mortes
                    }
                }
            }
        }
    }

    public void MiseAJourMeteo(Meteo nouvelleMeteo)
    {
        Meteo = nouvelleMeteo;
    }

    ///////------------------------------- M√©thode li√©es aux actions du joueur

    public bool Semer(Plante plante)// Semer les plantes sur le terrain
                                    // Retourne true si au moins une plante a √©t√© sem√©e, false sinon
    {
        bool auMoinsUneSemee = false;
        if (StockTotalDeSemis > 0) // V√©rifie s'il y a encore des semis en stock
        {
            // Continue tant qu‚Äôil reste de la place et des semis
            while (NbPlantes < CapaciteMaxPlantes && StockTotalDeSemis > 0)
            {
                for (int x = 0; x < LongueurTerrain; x++)
                {
                    for (int y = 0; y < LargeurTerrain; y++)
                    {
                        // Si la case est vide, on s√®me une nouvelle plante clon√©e
                        if (Plantes[x][y] == null && StockTotalDeSemis > 0)
                        {
                            Plantes[x][y] = plante.Cloner();
                            Plantes[x][y]!.Semer(); //Utilisation de la m√©thode issue de Plante.cs pour l'√©tat de la plante
                            // Ajustement du nombre de plantes pr√©sentes sur le terrain et du stock
                            NbPlantes++;
                            StockTotalDeSemis--;
                            auMoinsUneSemee = true; // Au moins une plante a √©t√© sem√©e
                        }
                    }
                }
            }
        }

        // Gestion des messages d'erreurs
        if (!auMoinsUneSemee)
        {
            if (NbPlantes >= CapaciteMaxPlantes)
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine("  Vous n'avez plus de place disponible pour semer vos plantes...\n");
                Console.ResetColor();
            }
            else if (StockTotalDeSemis <= 0)
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine("  Vous n'avez plus assez de semis disponible ...\n");
                Console.ResetColor();
            }
        }
        else
        {
            Console.WriteLine("  üßë‚Äçüåæ Vous avez sem√© votre terrain !\n");
        }

        return true; // Retourne false, le terrain est plein
    }

    public bool Arroser() // Arrose toutes les plantes si elles sont sem√©es sur le terrain.
                          // Retourne true si au moins une plante a √©t√© arros√©e, false sinon.
    {
        bool auMoinsUneArrosee = false;

        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                // V√©rifie que la case contient une plante ET qui a √©t√© sem√©e
                if (plante != null && plante.EstSemee)
                {
                    plante.Arroser();           // Appelle la m√©thode d‚Äôarrosage de la plante de Plante.cs
                    auMoinsUneArrosee = true;   // Au moins une plante a √©t√© arros√©e
                }
            }
        }

        if (auMoinsUneArrosee)
        {
            Console.WriteLine("\n   üöø Vous avez arros√© vos plantes !\n");
            NiveauHumiditeSol++; // On augmente l‚Äôhumidit√© du sol si au moins une plante a √©t√© arros√©e
            return true;         // Retourne true si au moins une plante a √©t√© arros√©e
        }
        else
        {
            //si aucune plante n'a √©t√© arros√©e
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Aucune plante n'est pr√™te √† √™tre arros√©e.");
            Console.ResetColor();
            return false;        // Aucune plante n‚Äôa √©t√© arros√©e
        }
    }

    public bool SoignerPlantesMalades()// Soigne toutes les plantes malades et sem√©es sur le terrain.
                                       // Retourne true si au moins une plante a √©t√© soign√©e, false sinon.
    {
        bool auMoinsUneSoignee = false;
        for (int x = 0; x < LongueurTerrain; x++)
        {
            for (int y = 0; y < LargeurTerrain; y++)
            {
                var plante = Plantes[x][y];

                // V√©rifie que la case contient une plante ET qu'elle soit malade ET qu'elle soit d√©j√† sem√©e
                if (plante != null && plante.EstMalade && plante.EstSemee)
                {
                    plante.EstMalade = false; // Soigne la plante
                    plante.NbrMoisMaladeConsecutif = 0; // R√©initialise le compteur de mois malade
                    auMoinsUneSoignee = true; // Au moins une plante a √©t√© soign√©e
                }
            }
        }

        if (auMoinsUneSoignee)
        {
            // Affiche un message de r√©ussite si des plantes ont √©t√© soign√©es
            Console.WriteLine("\n   üíâ Vous avez soign√© vos plantes d'une terrible maladie !\n");
            return true;
        }
        else
        {
            // Aucune plante malade trouv√©e
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Aucune plante n'est pr√™te √† √™tre soign√©e.");
            Console.ResetColor();
            return false;
        }
    }

    public bool Desherber()// M√©thode permettant de d√©sherber les plantes entour√©es de mauvaises herbes
                           // Retourne true si au moins une plante a √©t√© d√©sherb√©e, false sinon
    {
        bool auMoinsUneDesherbee = false;
        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                // V√©rifie si une plante est pr√©sente ET qu'elle est sem√©e ET entour√©e de mauvaises herbes
                if (plante != null && plante.EstSemee && plante.EstEntoureeParMauvaisesHerbes)
                {
                    plante.Desherber();        // Appel de la m√©thode de d√©sherbage de la plante de Plante.cs
                    auMoinsUneDesherbee = true;
                }
            }
        }

        // Message de validation de l'action
        if (auMoinsUneDesherbee)
        {
            Console.WriteLine(" üçÄ Vous avez retir√© les mauvaises herbes de vos plantes");
            return true; //les plantes ont √©t√© d√©sherb√©es
        }
        else
        {
            // Aucun d√©sherbage possible
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Aucune mauvaise herbe n‚Äôest pr√™te √† √™tre enlev√©e.");
            Console.ResetColor();
            return false;
        }
    }

    public bool DeracinerPlantesMortes()    // M√©thode permettant de retirer toutes les plantes mortes du terrain.
                                            // Retourne true si au moins une plante morte a √©t√© d√©racin√©e, false sinon.
    {
        bool auMoinsUneDeracinee = false; // Sert √† savoir si au moins une plante a √©t√© retir√©e

        for (int x = 0; x < LongueurTerrain; x++)
        {
            for (int y = 0; y < LargeurTerrain; y++)
            {
                var plante = Plantes[x][y];

                // Si la case contient une plante ET qu'elle est sem√©e ET morte
                if (plante != null && plante.EstMorte && plante.EstSemee)
                {
                    plante.RetirerPlanteMorte(); // M√©thode de la classe Plante.cs
                    Plantes[x][y] = null;        // Case vide
                    NbPlantes--;                 // Met √† jour le compteur de plantes vivantes sur le terrain
                    auMoinsUneDeracinee = true;  // Au moins une plante a √©t√© d√©racin√©e
                }
            }
        }
        EstRecouvertDePlantesMortes = false;//Pour etre sur que le terrain ne soit pas mis comme recouvert de plantes mortes

        if (auMoinsUneDeracinee)
        {
            // Message de validation de l'action
            Console.WriteLine("\n   ü•Ä Vous avez retir√© toutes les plantes mortes de votre terrain !\n");
            return true;
        }
        else
        {
            // Message d'erreur si aucune plante morte n‚Äôa √©t√© trouv√©e
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Aucune plante n'est pr√™te √† √™tre d√©racin√©e.");
            Console.ResetColor();
            return false;
        }
    }

    public bool RecolterPlantes()
    {
        bool auMoinsUneRecoltee = false;
        int totalRecolte = 0; // Compteur des semis r√©colt√©s

        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                // V√©rifie si la plante existe, est sem√©e et pr√™te √† √™tre r√©colt√©e
                if (plante != null && plante.EstRecoltable && plante.EstSemee && !plante.EstMorte
                && !plante.EstMalade && !plante.EstEntoureeParMauvaisesHerbes)
                {
                    int quantite = plante.RecolterPlante();  // R√©cup√®re la quantit√© poduite par cette plante
                    totalRecolte += quantite;                // L'ajoute au total r√©colt√©
                    StockTotalDeSemis += quantite;           // Met √† jour le stock total de semis disponibles
                    Plantes[i][j] = null;                    // Lib√®re la case, terrain redevient vide
                    NbPlantes--;
                    auMoinsUneRecoltee = true;               // Signale qu'une r√©colte a eu lieu
                }
            }
        }

        if (auMoinsUneRecoltee)
        {
            Console.WriteLine("\n   üß∫ Vous avez r√©colt√© vos plantes !\n");
            if (totalRecolte > 0)
                Console.WriteLine($"    Stock total apr√®s r√©colte : {StockTotalDeSemis}\n"); // Affiche le stock mis √† jour
            return true; // Indique succ√®s de la r√©colte
        }
        else
        {
            // Aucun plante pr√™te √† r√©colter
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Aucune plante n'√©tait pr√™te √† √™tre r√©colt√©e.");
            Console.ResetColor();
            return false; // Indique qu'aucune r√©colte n'a √©t√© faite
        }
    }

    public bool VendreSemis(Plante plante)// M√©thode permettant de vendre des semis d'une plante sp√©cifique
                                          // Retourne true si la vente est effectu√©e, false sinon
    {
        // Demande √† l'utilisateur la quantit√© de semis √† vendre
        Console.Write($"    Quantit√© de semis √† vendre (prix unitaire = {plante.PrixUnitaireDeLaPlante}): \n");

        // Lit la saisie utilisateur
        string saisie = Console.ReadLine()!;

        // Tente de convertir la saisie en entier, v√©rifie aussi que la quantit√© est positive ou nulle
        if (!int.TryParse(saisie, out int quantiteAVendre) || quantiteAVendre <= 0)
        {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Quantit√© invalide."); // Affiche un message d'erreur si la saisie est incorrecte
            Console.ResetColor();
            return false;
        }

        // V√©rifie si le joueur a suffisamment de semis en stock pour cette vente
        if (quantiteAVendre > StockTotalDeSemis)
        {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine(" Vous n'avez pas assez de semis en stock pour cette vente."); // Message d'erreur
            Console.ResetColor();
            return false;
        }

        // Calcule le gain total de la vente
        double prixUnitaire = plante.PrixUnitaireDeLaPlante;
        double gain = quantiteAVendre * prixUnitaire;

        // Mise √† jour du stock et du solde de pi√®ces d'or en chocolat du joueur
        StockTotalDeSemis -= quantiteAVendre;
        PiecesOrEnChocolat += gain;

        // Message de confirmation de la vente
        Console.WriteLine($"‚úÖ Vous avez vendu {quantiteAVendre} semis de {plante.Nom} pour {gain} pi√®ces d‚Äôor en chocolat !");
        Console.WriteLine($"üí∞ Nouveau solde : {PiecesOrEnChocolat} pi√®ces.");

        return true; // Vente r√©ussie
    }

    ///////------------------------------------------------ M√©thode li√©es √† la webcam

    public string RecapitulerInformationsWebcam() //Affichage des informations de la webcam
    {
        MettreAJourUrgence();//Pr√©paration du d√©clenchement du mode urgence

        Console.ForegroundColor = ConsoleColor.DarkMagenta;
        string message = "";
        Console.ResetColor();

        if (IntrusDetecte)
            message += " ‚ùó Intrus d√©tect√© dans le potager !\n";
        if (IntemperieDetectee)
            message += " üåßÔ∏è  Conditions m√©t√©orologiques d√©favorables d√©tect√©es !\n";
        if (!IntrusDetecte && !IntemperieDetectee)
            message += " ‚úÖ  Aucune urgence d√©tect√©e par la webcam ce mois-ci.\n";

        return message; //Informations de la webcam donn√©e au joueur
    }

    private void MettreAJourUrgence() //Initialisation des bool√©ens
    {
        IntrusDetecte = SignalerIntrus();
        IntemperieDetectee = SignalerIntemperie();
    }

    private bool SignalerIntrus()
    {
        return Random.Next(1, 101) <= RisquePresenceIntrus; //D√©tection ou non d'intrus, cette probabilit√© est diff√©rente en fonction du type de terrain
    }

    private bool SignalerIntemperie()
    {
        return Meteo.Type == TypeMeteo.ForteTempete || Meteo.Type == TypeMeteo.PluiesBattantes; //D√©tection ou non d'une mauvaise m√©t√©o
    }

    public void ActiverModeUrgence()
    {
        if (IntrusDetecte || IntemperieDetectee) //Si intrus d√©tect√© et/ou mauvaise m√©t√©o, on active le mode urgence
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("‚ö†Ô∏è  Mode Urgence activ√© :\n");
            Console.ResetColor();

            var (bruitFait, pareVentMis) = GererActionUrgence(); //Choix du joueur suite √† l'activation du mode urgence
            G√©rerCons√©quencesUrgence(bruitFait, pareVentMis); //Cons√©quences du choix du joueur
        }
        //R√©initialisation des bool√©ens
        IntrusDetecte = false;
        IntemperieDetectee = false;
        AfficherParcelle(); //Affichage du terrain et des plantes
    }

    private static (bool bruitFait, bool pareVentMis) GererActionUrgence()
    {
        //Outils disponibles pour le mode urgence
        bool bruitFait = false;
        bool pareVentMis = false;

        while (true)
        {
            //Actions possibles √† r√©aliser pour le mode d'urgence (pour complexifier le jeu au joueur, il n'a qu'une action disponible)
            Console.WriteLine("\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  Que voulez-vous faire ?");
            Console.WriteLine("1. Faire du bruit üó£Ô∏è");          // Permet d‚Äô√©loigner les intrus
            Console.WriteLine("2. D√©ployer un pare-vent ü™ü");     // Prot√®ge les plantes du vent
            Console.WriteLine("3. Ne rien faire");                // Le joueur choisit de ne rien faire (comportement par d√©faut)

            // Lecture de la touche saisie par l'utilisateur (sans l'afficher √† l'√©cran)
            ConsoleKeyInfo keyInfo = Console.ReadKey(intercept: true);
            switch (keyInfo.KeyChar)
            {
                // Gestion du choix de l'utilisateur
                case '1':
                    Console.WriteLine("\n   Vous faites du bruit pour √©loigner les intrus.\n");
                    bruitFait = true;
                    return (bruitFait, pareVentMis);
                case '2':
                    Console.WriteLine("\n   Vous d√©ployez un pare-vent pour prot√©ger vos r√©coltes.\n");
                    pareVentMis = true;
                    return (bruitFait, pareVentMis);
                case '3':
                    Console.WriteLine("\n   Vous ne faites rien.\n");
                    bruitFait = false;
                    pareVentMis = false;
                    return (bruitFait, pareVentMis);
                default: //Si erreur de saisie
                    Console.WriteLine("\n   Option invalide. Veuillez r√©essayer.\n");
                    break;
            }
        }
    }

    private void G√©rerCons√©quencesUrgence(bool bruitFait, bool pareVentMis)
    {
        bool auMoinsUneplanteAttaquee = false;

        // M√©thode locale qui v√©rifie s‚Äôil existe au moins une plante sem√©e et vivante sur le terrain
        bool ExistePlanteValide()
        {
            for (int i = 0; i < LongueurTerrain; i++)
            {
                for (int j = 0; j < LargeurTerrain; j++)
                {
                    var plante = Plantes[i][j];
                    if (plante != null && plante.EstSemee && !plante.EstMorte)
                        return true;
                }
            }
            return false; // Aucune plante valide trouv√©e
        }

        // ---------- Cas d'intrus d√©tect√© ----------
        if (!bruitFait && IntrusDetecte) // Si le joueur n‚Äôa pas fait de bruit et qu‚Äôil y a des intrus
        {
            if (!ExistePlanteValide()) // Si aucune plante n‚Äôest pr√©sente, inutile de tenter une attaque
            {
                Console.WriteLine("\n Aucune plante n'est pr√©sente sur le terrain.\n");
            }
            else
            {
                int tentatives = 0;
                bool planteAttaquee = false;

                // Tentatives al√©atoires pour trouver une plante √† attaquer
                while (!planteAttaquee && tentatives < 1000)
                {
                    int x = Random.Next(0, LongueurTerrain);
                    int y = Random.Next(0, LargeurTerrain);

                    var plante = Plantes[x][y];

                    // Si la plante est pr√©sente, sem√©e, et vivante ‚Üí elle peut √™tre attaqu√©e
                    if (plante != null && plante.EstSemee && !plante.EstMorte)
                    {
                        plante.EstMorte = true; // L'intrus tue la plante
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\n   Une plante est morte dans votre jardin √† cause des intrus...\n");
                        Console.ResetColor();

                        planteAttaquee = true;
                        auMoinsUneplanteAttaquee = true;
                    }

                    tentatives++;
                }
            }
        }

        // ---------- Cas d‚Äôintemp√©rie d√©tect√©e ----------
        if (!pareVentMis && IntemperieDetectee) // Si le joueur n‚Äôa pas mis de pare-vent et qu‚Äôil y a du vent
        {
            if (!ExistePlanteValide()) // Aucun effet possible s‚Äôil n‚Äôy a aucune plante
            {
                Console.WriteLine("\n Aucune plante n'est pr√©sente sur le terrain.\n");
            }
            else
            {
                int tentatives = 0;
                bool planteAttaquee = false;

                // Tentatives al√©atoires pour trouver une plante √† d√©raciner
                while (!planteAttaquee && tentatives < 1000)
                {
                    int x = Random.Next(0, LongueurTerrain);
                    int y = Random.Next(0, LargeurTerrain);

                    var plante = Plantes[x][y];

                    // Si la plante est sem√©e, pr√©sente et vivante ‚Üí elle peut √™tre d√©racin√©e
                    if (plante != null && plante.EstSemee && !plante.EstMorte)
                    {
                        Plantes[x][y] = null; // Elle est retir√©e du terrain
                        NbPlantes--;         // D√©cr√©mentation du nombre de plantes pr√©sentes

                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\n   Une plante a √©t√© d√©racin√©e dans votre jardin √† cause du vent...");
                        Console.ResetColor();

                        planteAttaquee = true;
                        auMoinsUneplanteAttaquee = true;
                    }

                    tentatives++;
                }
            }
        }

        // ---------- Si aucune attaque n'a √©t√© faite, avertir le joueur ----------
        if (!auMoinsUneplanteAttaquee)
            Console.WriteLine("\n Aucune plante n'est pr√©sente sur le terrain.");
    }



    ///////------------------------------- M√©thode li√©es √† des √©v√®nements al√©atoires

    public void UtiliserFonctionnalitesAleatoire(Meteo Meteo) //M√©thode centralisant les m√©thodes r√©currentes de gestion de terrain
    {
        CalculerHumiditeSol(Meteo);
        ApparaitreMauvaiseHerbe();
        TomberMalade();
    }

    public void ApparaitreMauvaiseHerbe()// Parcourt tout le terrain et fait appara√Ætre des mauvaises herbes sur les plantes sem√©es
                                         // Cela simule la pousse al√©atoire de mauvaises herbes entre les tours ou au fil du temps
    {
        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                //V√©rifie que la case contient une plante ET qu'elle est sem√©e
                if (plante != null && plante.EstSemee)
                    plante.ApparaitreMauvaiseHerbe(); //Utilisation d'une m√©thode de Plante.cs
            }
        }
    }

    public void Pourrir()
    {
        bool plantesOntPourri = false;

        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                if (plante != null && plante.EstSemee && plante.EstRecoltable)
                {
                    if (plante.Pourrir()) //V√©rifie que la plante a pourrie
                    {
                        plantesOntPourri = true;
                    }
                }
            }
        }

        if (plantesOntPourri)
            Console.WriteLine("Oh non, vous n'avez pas r√©colter vos plantes √† temps, certaines ont pourris ! üòî");
    }

    public void TomberMalade()// Simule le risque al√©atoire de contamination par une maladie pour chaque plante sem√©e
    {
        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];

                //V√©rifie que la case contient une plante ET qu'elle est sem√©e
                if (plante != null && plante.EstSemee)
                    plante!.EtreMalade(Random); //Utilisation d'une m√©thode de Plante.cs 
            }
        }
    }

    public void CalculerHumiditeSol(Meteo meteo)
    {
        switch (meteo.Type) //Ajustement du niveau d'humidit√© du sol en fonction de la m√©t√©o
        {
            //Pluie
            case TypeMeteo.PetitePluie:
                NiveauHumiditeSol += 0.5;
                break;

            case TypeMeteo.Pluie:
                NiveauHumiditeSol += 1;
                break;

            case TypeMeteo.PluiesBattantes:
                NiveauHumiditeSol += 1.5;
                break;

            case TypeMeteo.ForteTempete:
                NiveauHumiditeSol += 2;
                break;

            // Pas de pluie
            case TypeMeteo.Ensoleille:
                NiveauHumiditeSol -= 2;
                break;
            case TypeMeteo.Nuageux:
                NiveauHumiditeSol -= 1;
                break;
        }
        // Actualisation du statut d'humidit√© du sol pour l'utiliser pour les plantes
        if (NiveauHumiditeSol < 0) NiveauHumiditeSol = 0;

        if (NiveauHumiditeSol < 8)
        {
            HumiditeSol = "stress hydrique";
        }
        else if (NiveauHumiditeSol < 24)
        {
            HumiditeSol = "humide";
        }
        else if (NiveauHumiditeSol < 40)
            HumiditeSol = "tresHumide";
        else
        {
            HumiditeSol = "extremementHumide";
        }
    }

    ///////------------------------------- M√©thode li√©es √† l'affichage d'informations
    public string AfficherResumeTerrain()//R√©sum√© de l'√©tat des plantes
    {
        int nbrMalades = 0;
        int nbrMauvaisesHerbes = 0;
        int nbrMortes = 0;
        int nbrGrandes = 0;
        int nbrrecoltable = 0;
        int placeDisponible = 0;

        for (int i = 0; i < LongueurTerrain; i++)
        {
            for (int j = 0; j < LargeurTerrain; j++)
            {
                var plante = Plantes[i][j];
                if (plante == null)
                    placeDisponible++;
                else if (plante != null && plante.EstSemee)
                {
                    if (plante.EstMorte)
                        nbrMortes++;
                    else if (plante.EstMalade)
                        nbrMalades++;
                    else if (plante.EstEntoureeParMauvaisesHerbes)
                        nbrMauvaisesHerbes++;
                    else if (plante.EstRecoltable)
                        nbrrecoltable++;
                    else if (plante.AGrandi)
                        nbrGrandes++;
                }
            }
        }
        string resume = $"   üìã R√©sum√© du terrain pour le mois :\n" +
                        $"       ü•Ä {nbrMortes} plante(s) morte(s).\n" +
                        $"       ü¶† {nbrMalades} plante(s) malade(s).\n" +
                        $"       üçÄ {nbrMauvaisesHerbes} plante(s) entour√©e(s) de mauvaises herbes.\n" +
                        $"       üç¨ {nbrrecoltable} plante(s) r√©coltable(s).\n" +
                        $"       üåø {nbrGrandes} plante(s) en croissance avanc√©e.\n" +
                        $"       üå± {NbPlantes} plante(s) pr√©sente(s).\n" +
                        $"       üü´ {placeDisponible} place(s) disponicle(s).\n";
        return resume;
    }

    public void AfficherLeSolde() //R√©sum√© des informations du solde bancaire du joueur
    {
        Console.ForegroundColor = ConsoleColor.Magenta;
        Console.WriteLine($"        üí∞  Solde actuel du compte : {PiecesOrEnChocolat} pi√®ces d'or en chocolat\n");
        Console.ResetColor();
    }

    public override string ToString()//R√©sum√© des informations du terrain
    {
        return $"       Terrain {Nom} ({Superficie} m¬≤)\n" +
               $"       Type de sol : {TypeSol}\n" +
               $"       Humidit√© du terrain : {HumiditeSol}\n" +
               $"       Niveau humidit√© du terrain : {NiveauHumiditeSol}\n" +
               $"       Capacit√© max : {CapaciteMaxPlantes} plantes\n" +
               $"       Plantes pr√©sentes : {NbPlantes}\n" +
               $"       Stock de semis : {StockTotalDeSemis}\n";
    }
}
